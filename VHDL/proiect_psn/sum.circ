<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="3.8.0" version="1.0">
  This file is intended to be loaded by Logisim-evolution v3.8.0(https://github.com/logisim-evolution/).

  <lib desc="#Wiring" name="0">
    <tool name="Pin">
      <a name="appearance" val="classic"/>
    </tool>
  </lib>
  <lib desc="#Gates" name="1"/>
  <lib desc="#Plexers" name="2"/>
  <lib desc="#Arithmetic" name="3"/>
  <lib desc="#Memory" name="4"/>
  <lib desc="#I/O" name="5"/>
  <lib desc="#TTL" name="6"/>
  <lib desc="#TCL" name="7"/>
  <lib desc="#Base" name="8"/>
  <lib desc="#BFH-Praktika" name="9"/>
  <lib desc="#Input/Output-Extra" name="10"/>
  <lib desc="#Soc" name="11"/>
  <main name="main"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
  </options>
  <mappings>
    <tool lib="8" map="Button2" name="Poke Tool"/>
    <tool lib="8" map="Button3" name="Menu Tool"/>
    <tool lib="8" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="8" name="Poke Tool"/>
    <tool lib="8" name="Edit Tool"/>
    <tool lib="8" name="Wiring Tool"/>
    <tool lib="8" name="Text Tool"/>
    <sep/>
    <tool lib="0" name="Pin"/>
    <tool lib="0" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </tool>
    <sep/>
    <tool lib="1" name="NOT Gate"/>
    <tool lib="1" name="AND Gate"/>
    <tool lib="1" name="OR Gate"/>
    <tool lib="1" name="XOR Gate"/>
    <tool lib="1" name="NAND Gate"/>
    <tool lib="1" name="NOR Gate"/>
    <sep/>
    <tool lib="4" name="D Flip-Flop"/>
    <tool lib="4" name="Register"/>
  </toolbar>
  <circuit name="main">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="main"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="simulationFrequency" val="1.0"/>
  </circuit>
  <vhdl name="dcd">LIBRARY ieee;
USE ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;
ENTITY dcd IS
  PORT (
  	i: in std_logic_vector(7 downto 0);
  	hun, zec, uni, thou: out std_logic_vector(3 downto 0)
    );
END dcd;


ARCHITECTURE TypeArchitecture OF dcd IS
signal hu, ze, un, th: unsigned(3 downto 0);
signal t, h, z, u, aux: natural;
BEGIN
	
aux &lt;= conv_integer(i);
	h&lt;= aux/100;
	z&lt;= (aux/10) rem 10;
	u &lt;= aux rem 10;
	t&lt;= aux/1000;
	th&lt;= to_unsigned(t, 4);
	hu &lt;= to_unsigned(h, 4);
	ze &lt;= to_unsigned(z, 4);
	un &lt;= to_unsigned(u, 4);
	thou&lt;=std_logic_vector(th);
	hun&lt;=std_logic_vector(hu);
	zec&lt;=std_logic_vector(ze);
	uni&lt;=std_logic_vector(un);
	

END TypeArchitecture;</vhdl>
  <vhdl name="sumator">LIBRARY ieee;
USE ieee.std_logic_1164.all;
use IEEE.std_logic_unsigned.all;
use IEEE.NUMERIC_STD.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
ENTITY sumator IS
  PORT (
  	A: in std_logic_vector(7 downto 0);
  	mem, reset: in std_logic;
  	selectie: in std_logic_vector(2 downto 0);
  	O: inout std_logic_vector(7 downto 0)
	);
END sumator;


ARCHITECTURE TypeArchitecture OF sumator IS
signal t: std_logic_vector(7 downto 0);
signal a_a, b_b, c_c : natural;
signal B : std_logic_Vector(7 downto 0):="00000000";
BEGIN
	B&lt;=O;
	a_a&lt;= conv_integer(A);
	b_b&lt;= conv_integer(B);
 suma:process(mem, reset)
 variable cnt: natural :=0;
 begin

 	if(reset = '1') then
 		O&lt;="00000000";
 		c_c&lt;=0;
 		cnt := 0;
 	end if;
	if(rising_edge(mem) and mem = '1') then
		c_c &lt;= a_a+b_b;
		cnt := cnt+1;
	end if;
	
	if(selectie = "100" and cnt = 3) then
		c_c &lt;= 0;
	elsif(selectie = "101" and cnt = 5) then
		c_c &lt;= 0;
	elsif(selectie = "110" and cnt = 9)then
		c_c &lt;= 0;
	elsif(Selectie = "111" and cnt = 17) then
		c_c &lt;=0;
	end if;
	O&lt;=std_logic_vector(to_unsigned(c_c, 8));

end process;
END TypeArchitecture;
--toDO: sa fac sa mearga pana la selectie</vhdl>
</project>
