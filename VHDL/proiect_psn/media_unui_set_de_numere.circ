<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="3.8.0" version="1.0">
  This file is intended to be loaded by Logisim-evolution v3.8.0(https://github.com/logisim-evolution/).

  <lib desc="#Wiring" name="0">
    <tool name="Pin">
      <a name="appearance" val="classic"/>
    </tool>
  </lib>
  <lib desc="#Gates" name="1"/>
  <lib desc="#Plexers" name="2"/>
  <lib desc="#Arithmetic" name="3"/>
  <lib desc="#Memory" name="4"/>
  <lib desc="#I/O" name="5"/>
  <lib desc="#TTL" name="6"/>
  <lib desc="#TCL" name="7"/>
  <lib desc="#Base" name="8"/>
  <lib desc="#BFH-Praktika" name="9"/>
  <lib desc="#Input/Output-Extra" name="10"/>
  <lib desc="#Soc" name="11"/>
  <main name="main"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
  </options>
  <mappings>
    <tool lib="8" map="Button2" name="Poke Tool"/>
    <tool lib="8" map="Button3" name="Menu Tool"/>
    <tool lib="8" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="8" name="Poke Tool"/>
    <tool lib="8" name="Edit Tool"/>
    <tool lib="8" name="Wiring Tool"/>
    <tool lib="8" name="Text Tool"/>
    <sep/>
    <tool lib="0" name="Pin"/>
    <tool lib="0" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </tool>
    <sep/>
    <tool lib="1" name="NOT Gate"/>
    <tool lib="1" name="AND Gate"/>
    <tool lib="1" name="OR Gate"/>
    <tool lib="1" name="XOR Gate"/>
    <tool lib="1" name="NAND Gate"/>
    <tool lib="1" name="NOR Gate"/>
    <sep/>
    <tool lib="4" name="D Flip-Flop"/>
    <tool lib="4" name="Register"/>
  </toolbar>
  <circuit name="main">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="main"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="downloadBoard" val="NEXYS4_DDR_NOU"/>
    <a name="downloadFrequency" val="4.0"/>
    <a name="simulationFrequency" val="2048000.0"/>
    <boardmap boardname="NEXYS4_DDR_NOU">
      <mc key="/Input_1" map="521,184"/>
      <mc key="/Input_2" map="564,138"/>
      <mc key="/Input_3" map="298,144"/>
      <mc key="/Input_bus_1" pmap="334_325_0,300_325_0,266_325_0,233_325_0,197_325_0,163_325_0,128_325_0,94_325_0"/>
      <mc key="/Input_bus_2" pmap="436_325_0,403_325_0,368_325_0"/>
      <mc key="/Input_bus_3" pmap="536_325_0,503_325_0,470_325_0"/>
      <mc key="/L_7_Segment_Display_1" pmap="162_219_0,184_224_0,184_243_0,164_257_0,153_243_0,153_223_0,164_237_0,107_271_0"/>
      <mc key="/Output_bus_1" pmap="289_200_0,248_200_0,208_200_0,160_200_0"/>
    </boardmap>
    <comp lib="0" loc="(140,120)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_bus_1"/>
      <a name="radix" val="10unsigned"/>
      <a name="width" val="8"/>
    </comp>
    <comp lib="0" loc="(140,140)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_bus_2"/>
      <a name="width" val="3"/>
    </comp>
    <comp lib="0" loc="(140,160)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_bus_3"/>
      <a name="width" val="3"/>
    </comp>
    <comp lib="0" loc="(140,180)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_1"/>
    </comp>
    <comp lib="0" loc="(140,200)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_2"/>
    </comp>
    <comp lib="0" loc="(140,220)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_3"/>
    </comp>
    <comp lib="0" loc="(360,120)" name="Splitter">
      <a name="fanout" val="7"/>
      <a name="incoming" val="7"/>
    </comp>
    <comp lib="0" loc="(430,170)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="Output_bus_1"/>
      <a name="output" val="true"/>
      <a name="width" val="4"/>
    </comp>
    <comp lib="5" loc="(420,10)" name="7-Segment Display">
      <a name="label" val="L_7_Segment_Display_1"/>
    </comp>
    <comp loc="(360,120)" name="media_unui_set_nr">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="media_unui_set_nr_1"/>
    </comp>
    <wire from="(360,140)" to="(380,140)"/>
    <wire from="(380,100)" to="(390,100)"/>
    <wire from="(380,110)" to="(380,130)"/>
    <wire from="(380,130)" to="(490,130)"/>
    <wire from="(380,140)" to="(380,170)"/>
    <wire from="(380,170)" to="(430,170)"/>
    <wire from="(380,20)" to="(380,50)"/>
    <wire from="(380,20)" to="(390,20)"/>
    <wire from="(380,60)" to="(410,60)"/>
    <wire from="(380,70)" to="(420,70)"/>
    <wire from="(380,80)" to="(410,80)"/>
    <wire from="(380,90)" to="(400,90)"/>
    <wire from="(390,10)" to="(390,20)"/>
    <wire from="(390,10)" to="(420,10)"/>
    <wire from="(390,100)" to="(390,120)"/>
    <wire from="(390,120)" to="(480,120)"/>
    <wire from="(400,110)" to="(440,110)"/>
    <wire from="(400,90)" to="(400,110)"/>
    <wire from="(410,0)" to="(410,60)"/>
    <wire from="(410,0)" to="(430,0)"/>
    <wire from="(410,100)" to="(430,100)"/>
    <wire from="(410,80)" to="(410,100)"/>
    <wire from="(430,0)" to="(430,10)"/>
    <wire from="(430,70)" to="(430,100)"/>
    <wire from="(440,0)" to="(440,10)"/>
    <wire from="(440,0)" to="(490,0)"/>
    <wire from="(440,70)" to="(440,110)"/>
    <wire from="(450,10)" to="(480,10)"/>
    <wire from="(480,10)" to="(480,120)"/>
    <wire from="(490,0)" to="(490,130)"/>
  </circuit>
  <vhdl name="media_unui_set_nr">

LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;
ENTITY media_unui_set_nr IS&#13;
  PORT (&#13;
  input_device: in std_logic_vector(7 downto 0);
  length, control: in std_logic_vector(2 downto 0);
  reset, pin_button, D_clk: in std_logic;
  output_device: out std_logic_vector(6 downto 0);
  cat: out std_logic_vector(3 downto 0)
    );&#13;
END media_unui_set_nr;&#13;
&#13;

ARCHITECTURE TypeArchitecture OF media_unui_set_nr IS&#13;

component sumator IS
  PORT (
  	A: in std_logic_vector(7 downto 0);
  	mem, reset: in std_logic;
  	selectie: in std_logic_vector(2 downto 0);
  	O: inout std_logic_vector(7 downto 0)
	);
END component sumator;

component calc_medie IS
  PORT (
	suma: in std_logic_vector(7 downto 0);
  		sel: in std_logic_vector(2 downto 0);
  		clk, reset: in std_logic;
  		media: out std_logic_vector(7 downto 0)
  );
END component calc_medie;

component mux_8_1 IS
  PORT (
  i0, i1, i2, i3: in std_logic_Vector(3 downto 0);
  s: in std_logic_Vector(1 downto 0);
  o: out std_logic_Vector(3 downto 0)
    );
END component mux_8_1;

component numarator_16 IS
  PORT (
  	clk: in std_logic;
  	Q : out std_logic_vector(1 downto 0)
    );
END component numarator_16;

component mux_8_1_init IS
  PORT (
  s: in std_logic_Vector(1 downto 0);
  o: out std_logic_Vector(3 downto 0)
    );
END component mux_8_1_init;

component dcd IS
  PORT (
  	i: in std_logic_vector(7 downto 0);
  	hun, zec, uni, thou: out std_logic_vector(3 downto 0)
    );
END component dcd;

component gen_nr_mx is
	PORT(
	clk, reset, memorare: in std_logic;
	sel: in std_logic_vector(2 downto 0);
	O:out std_logic_vector(7 downto 0)
	);
end component gen_nr_mx;

component medii_RAM_ROM IS
  PORT (
sel: in std_logic_vector(2 downto 0);
  	   O: out std_logic_vector(7 downto 0)
  	   );
end component medii_RAM_ROM;

component clock_division is
port(
	clk, reset: in std_logic;
	newClck: out std_logic
	);
end component clock_division;

component mux_final IS
  PORT (
	i0, i1, i2: in std_logic_Vector(7 downto 0);
	sel:in std_logic_vector(2 downto 0);
	o: out std_logic_vector(7 downto 0)
    );
END component mux_final;

component one_ssd IS
  PORT (
	uni: in std_logic_vector(3 downto 0);
	ssd_uni: out std_logic_Vector(6 downto 0)
    );
END component one_ssd;

signal clk: std_logic;
signal sum, random, rand_sum, avg_sum, rand_avg, avg_rom: std_logic_vector(7 downto 0);
signal prov: std_logic_vector(7 downto 0);
signal thou, hun, zec, uni: std_logic_Vector(3 downto 0);
signal mux_sel: std_logic_vector(1 downto 0);
signal iesire_mux_afisare: std_logic_vector(3 downto 0);

------port map---------------------------------------------------------------
BEGIN&#13;
&#13;

diviz: clock_division port map(D_clk, reset, clk);

--control:000
suma_control_zero: sumator port map(input_device, pin_button, reset, length, sum);
media_control_zero: calc_medie port map(sum, length, clk, reset, avg_sum);

--control:110 and 111(generator numere pseudo-aleatoare)
generare_control_sapte: gen_nr_mx port map(clk, reset, pin_button, control, random);
suma_control_sapte: sumator port map(random, pin_button, reset, length, rand_avg);

--control:010 and 011(media unor numere din memoria rom preinitializata)
gen_sum: medii_RAM_ROM port map (control, avg_rom);

--decizia finala esteeeee:
dec: mux_final port map(avg_sum, rand_avg, avg_rom, control, prov);

--afisare
num: numarator_16 port map(clk, mux_sel);
decodificare: dcd port map(prov, hun, zec, uni, thou);
mux_afisare: mux_8_1 port map(thou, hun, zec, uni, mux_sel, iesire_mux_afisare);
ssd: one_ssd port map(iesire_mux_afisare, output_device);

--selectare ssd
cath: mux_8_1_init port map(mux_sel, cat);

&#13;
END TypeArchitecture;&#13;


--SUMATOR-----------------------------------------------------------------------------
LIBRARY ieee;
USE ieee.std_logic_1164.all;
use IEEE.std_logic_unsigned.all;
use IEEE.NUMERIC_STD.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
ENTITY sumator IS
  PORT (
  	A: in std_logic_vector(7 downto 0);
  	mem, reset: in std_logic;
  	selectie: in std_logic_vector(2 downto 0);
  	O: inout std_logic_vector(7 downto 0)
	);
END sumator;


ARCHITECTURE TypeArchitecture OF sumator IS
signal t: std_logic_vector(7 downto 0);
signal a_a, b_b, c_c : natural;
signal B : std_logic_Vector(7 downto 0):="00000000";
BEGIN
	B&lt;=O;
	a_a&lt;= conv_integer(A);
	b_b&lt;= conv_integer(B);
 suma:process(mem, reset)
 variable cnt: natural :=0;
 begin

 	if(reset = '1') then
 		O&lt;="00000000";
 		c_c&lt;=0;
 		cnt := 0;
 	end if;
	if(rising_edge(mem) and mem = '1') then
		c_c &lt;= a_a+b_b;
		cnt := cnt+1;
	end if;
	
	if(selectie = "100" and cnt = 3) then
		c_c &lt;= 0;
	elsif(selectie = "101" and cnt = 5) then
		c_c &lt;= 0;
	elsif(selectie = "110" and cnt = 9)then
		c_c &lt;= 0;
	elsif(Selectie = "111" and cnt = 17) then
		c_c &lt;=0;
	end if;
	O&lt;=std_logic_vector(to_unsigned(c_c, 8));

end process;
END TypeArchitecture;
--toDO: sa fac sa mearga pana la selectie


--Registru de shiftare pentru medie-------------------------------------------------------
LIBRARY ieee;
USE ieee.std_logic_1164.all;

use ieee.numeric_std.all;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

ENTITY calc_medie IS
  PORT (
	suma: in std_logic_vector(7 downto 0);
	reset, clk: in std_logic;
  		sel: in std_logic_vector(2 downto 0);
  		media: out std_logic_vector(7 downto 0)
  );
END calc_medie;


ARCHITECTURE arch_calc_medie OF calc_medie IS

BEGIN

process(reset, clk)
begin
	if(reset = '1')then
		media &lt;= "00000000";
	elsif rising_edge(clk) then 

	if(sel = "100") then
		media &lt;= "0" &amp; suma(7 downto 1);
	end if;

	if(sel = "101") then
		media &lt;= "00" &amp; suma(7 downto 2);
	end if;

	if(sel = "110") then 
		media &lt;= "000" &amp; suma(7 downto 3);
	end if;

	if(sel = "111") then
		media &lt;= "0000" &amp; suma(7 downto 4);
	end if;
	end if;
end process;

END arch_calc_medie;



--MUX pentru afisare-------------------------------------------------------------
LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY mux_8_1 IS
  PORT (
  i0, i1, i2, i3: in std_logic_Vector(3 downto 0);
  s: in std_logic_Vector(1 downto 0);
  o: out std_logic_Vector(3 downto 0)
    );
END mux_8_1;


ARCHITECTURE TypeArchitecture OF mux_8_1 IS

BEGIN

process(s, i0, i1, i2, i3)
begin
	case s is
	when "00" =&gt; o&lt;=i0;
	when "01" =&gt; o&lt;=i1;
	when "10" =&gt; o&lt;=i2;
	when "11" =&gt; o&lt;=i3;
	when others =&gt; o&lt;="XXXX";
	end case;
	
END PROCESS;

END TypeArchitecture;


--numarator pentru afisare-----------------------------------------------------
LIBRARY ieee;
USE ieee.std_logic_1164.all;

use IEEE.std_logic_arith.all;
 use IEEE.std_logic_unsigned.all;
 use IEEE.numeric_std.all;
ENTITY numarator_16 IS
  PORT (
  	clk: in std_logic;
  	Q : out std_logic_vector(1 downto 0)
    );
END numarator_16;


ARCHITECTURE TypeArchitecture OF numarator_16 IS

BEGIN

process(clk)
	variable Q_new: std_logic_vector(15 downto 0) := "0000000000000000";
begin
	if clk'event
	and clk = '1' then
		if(conv_integer(Q_new) = 65535) then q_new := "0000000000000000";
		else
		Q_new := Q_new + 1;
		end if;
	end if;
	Q &lt;= Q_new(15 downto 14);
end process;

END TypeArchitecture;


--MUX initializat pentru afisare-----------------------------------------------------------------
LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY mux_8_1_init IS
  PORT (
  s: in std_logic_Vector(1 downto 0);
  o: out std_logic_Vector(3 downto 0)
    );
END mux_8_1_init;



ARCHITECTURE TypeArchitecture OF mux_8_1_init IS

BEGIN

process(s)
begin
	case s is
	when "00" =&gt; o&lt;="0001";
	when "01" =&gt; o&lt;="0010";
	when "10" =&gt; o&lt;="0100";
	when "11" =&gt; o&lt;="1000";

	when others =&gt; o&lt;="XXXX";
	end case;
	
END PROCESS;

END TypeArchitecture;


-- decodificator pentru zeci sute unitati------------------------------------------------------
LIBRARY ieee;
USE ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;

ENTITY dcd IS
  PORT (
  	i: in std_logic_vector(7 downto 0);
  	hun, zec, uni, thou: out std_logic_vector(3 downto 0)
    );
END dcd;


ARCHITECTURE TypeArchitecture OF dcd IS
signal hu, ze, un, th: unsigned(3 downto 0);
signal t, h, z, u, aux: natural;
BEGIN
	
aux &lt;= conv_integer(i);
	h&lt;= aux/100;
	z&lt;= (aux/10) rem 10;
	u &lt;= aux rem 10;
	t&lt;= aux/1000;
	th&lt;= to_unsigned(t, 4);
	hu &lt;= to_unsigned(h, 4);
	ze &lt;= to_unsigned(z, 4);
	un &lt;= to_unsigned(u, 4);
	thou&lt;=std_logic_vector(th);
	hun&lt;=std_logic_vector(hu);
	zec&lt;=std_logic_vector(ze);
	uni&lt;=std_logic_vector(un);

end architecture;


--generator de numere pseudo aleatorii pe 4 si 8 biti--------------------------------------------------
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;
ENTITY gen_nr_mx is
	PORT(
	clk,reset, memorare: in std_logic;
	sel: in std_logic_vector(2 downto 0);
	O:out std_logic_vector(7 downto 0)
	);
end gen_nr_mx;

architecture ARH of gen_nr_mx is

	component MX is
	port(I1, I2: in std_logic_vector(7 downto 0);
		sel: in std_logic_vector(2 downto 0);
		O: out std_logic_vector(7 downto 0)
		);
	end component;

	component gen_nr is
	PORT(clk, memorare: in std_logic;
  		sel: in std_logic_vector(2 downto 0);
  		ies1: out std_logic_vector(7 downto 0);
  		ies2: out std_logic_vector(7 downto 0)
    	);
   	end component;

	signal i1, i2: std_logic_vector(7 downto 0);
	
	begin
	pas1: gen_nr port map(clk, memorare, sel, i1, i2);
	pas2: MX port map(i1, i2, sel, O);
	
end architecture ARH;



LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;
ENTITY gen_nr IS
  PORT(
  	clk, memorare: in std_logic;
  	sel: in std_logic_vector(2 downto 0);
  	ies1: out std_logic_vector(7 downto 0);
  	ies2: out std_logic_vector(7 downto 0)
    );
END gen_nr;


ARCHITECTURE arch_gen_nr OF gen_nr IS
BEGIN
	process(clk)
	
	variable ies_aux_1: std_logic_vector(7 downto 0) :="00001111";
	variable ies_aux_2: std_logic_vector(7 downto 0) :="11111111";
	variable s1: std_logic;
	variable s2: std_logic;
	
	begin

	s1:=ies_aux_1(3) xor ies_aux_1(0);
	s2:=ies_aux_2(7) xor ies_aux_2(0);
	
	if(sel = "110") then 
		s1 :=ies_aux_1(3) xor ies_aux_1(0);
		if(rising_edge(clk) and memorare = '1') then
			ies_aux_1 :="0000" &amp; ies_aux_1(2 downto 0) &amp; s1;
		end if;
	
		ies1 &lt;= ies_aux_1;
		ies2 &lt;= "00000000";
	end if;

	if(sel = "111") then 
		s2 :=ies_aux_2(7) xor ies_aux_2(0);
		if(rising_edge(clk)) then
			ies_aux_2 := ies_aux_2(6 downto 0) &amp; s2;
		end if;

		ies1 &lt;= "00001111";
		ies2 &lt;= ies_aux_2;
	end if;
	end process;

END arch_gen_nr;


LIBRARY ieee;
USE ieee.std_logic_1164.all;
entity MX is
	port(I1, I2: in std_logic_vector(7 downto 0);
		sel: in std_logic_vector(2 downto 0);
		O: out std_logic_vector(7 downto 0)
	);
end MX;

architecture arch_MUX of MX is
signal O_aux: std_logic_vector(7 downto 0);
begin
	process(sel,I1,I2)
	begin
		if(sel = "110") then
			O_aux &lt;= I1;

		elsif(sel = "111") then
			O_aux &lt;= I2;
		else O_aux &lt;= "00000000";
		end if;

	end process;
	O &lt;= O_aux;
end arch_MUX;




--2 memorii rom care au media gata facuta--------------------------------------------------------

LIBRARY ieee;
USE ieee.std_logic_1164.all;

USE ieee.std_logic_unsigned.all;
USE ieee.std_logic_arith.all;
use ieee.numeric_std.all;
ENTITY medii_RAM_ROM IS
  PORT (
sel: in std_logic_vector(2 downto 0);
  	   O: out std_logic_vector(7 downto 0)
  );
END medii_RAM_ROM;

ARCHITECTURE arch_medii_RAM_ROM OF medii_RAM_ROM IS

	type MATRICE is array (0 to 5) of std_logic_vector(7 downto 0);
BEGIN

	process(sel)

		variable mem_1: MATRICE := ("00110110","10100100","10100010","01011011","01101000","00010101");
		variable mem_2: MATRICE := ("11001001","01011011","01011101","10100100","10010111","11101010");
		variable sum: natural;
		
	begin
		if(sel = "010") then
			sum:=0;
			for i in 0 to 5 loop
				sum := sum + conv_integer(mem_1(i));
			end loop;
			sum := sum / 6;
		end if;

		if(sel ="011") then
			sum:=0;
			for i in 0 to 5 loop
				sum := sum + conv_integer(mem_2(i));
			end loop;
			sum := sum / 6;
		end if;

		O &lt;= std_logic_vector(TO_UNSIGNED(sum, 8));
		
	end process;
	

END arch_medii_RAM_ROM;


--Divizare de clock-----------------------------------
LIBRARY ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;

entity clock_division is
port(
	clk, reset: in std_logic;
	newClck: out std_logic
	);
end entity clock_division;

architecture arhclock of clock_division is
signal count_c: natural;
signal new_clock: std_logic :='1';
begin
process(clk)
begin
	if(reset = '1') then 
		count_c &lt;= 1;
	elsif(RISING_EDGE(clk)) then
		if(count_c &gt;= 50000000) then
			count_c &lt;= 1;
			new_clock &lt;= not(new_clock);
		else count_c &lt;= count_c+1;
		end if;
	end if;
	end process;
	newClck &lt;= new_clock;
end arhclock;


--multiplexor pentru dicizie finala--------------------------

LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY mux_final IS
  PORT (
	i0, i1, i2: in std_logic_Vector(7 downto 0);
	sel:in std_logic_vector(2 downto 0);
	o: out std_logic_vector(7 downto 0)
    );
END entity mux_final;


ARCHITECTURE TypeArchitecture OF mux_final IS

BEGIN
	O &lt;= I2 when (sel = "010" or sel = "011") else i1 when (sel = "110" or sel = "111") else i0 when sel = "000" else "XXXXXXXX";


END TypeArchitecture;


--seven segment display--------------------------------------------
LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY one_ssd IS
  PORT (
	uni: in std_logic_vector(3 downto 0);
	ssd_uni: out std_logic_Vector(6 downto 0)
    );
END one_ssd;



ARCHITECTURE TypeArchitecture OF one_ssd IS

BEGIN

ssd_uni&lt;="1111110" when uni=x"0" else "0110000" when uni = x"1" else "1101101" when uni = x"2" else "1111001" when uni = x"3" else "0110011" when uni = x"4"
	else "1011011" when uni = x"5" else "1011111" when uni = x"6" else "1110000" when uni = x"7" else "1111111" when uni = x"8" else "1110011" when uni = x"9" else "0000000";

END TypeArchitecture;
</vhdl>
</project>
